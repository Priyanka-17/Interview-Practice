/*jshint esversion: 6 */
const Node = function(value, leftChild, rightChild, parent) {
  this.value = value;
  this.leftChild = leftChild;
  this.rightChild = rightChild;
  this.parent = parent;
};

const BST = function() {
  this.root = null;
};

BST.prototype = {
  // Pre Order Traversal
  preOrder: function(operation) {
    var preOrderFrom = function(node, operation) {
      operation(node);
      if (node.leftChild) {
        preOrderFrom(node.leftChild, operation);
      }
      if (node.rightChild) {
        preOrderFrom(node.rightChild, operation);
      }
    };
    operation = operation || (node => {console.log(node.value);});
    preOrderFrom(this.root, operation);
  },

  // In Order Traversal
  inOrder: function(operation) {
    var inOrderFrom = function(node, operation) {
      if (node.leftChild) {
        inOrderFrom(node.leftChild, operation);
      }
      operation(node);
      if (node.rightChild) {
        inOrderFrom(node.rightChild, operation);
      }
    };
    operation = operation || (node => {console.log(node.value);});
    inOrderFrom(this.root, operation);
  },

  // Post Order Traversal
  postOrder: function(operation) {
    var postOrderFrom = function(node, operation) {
      if (node.leftChild) {
        postOrderFrom(node.leftChild, operation);
      }
      if (node.rightChild) {
        postOrderFrom(node.rightChild, operation);
      }
      operation(node);
    };
    operation = operation || (node => {console.log(node.value);});
    postOrderFrom(this.root, operation);
  },

  // Find
  find: function(value) {
    var findInSubtree = function(node, value) {
      if (node.value == value) {
        return node;
      } else if (node.value > value) {
        if (node.leftChild) {
          return findInSubtree(node.leftChild, value);
        } else return null;
      } else {
        if (node.rightChild) {
          return findInSubtree(node.rightChild, value);
        } else return null;
      }
    };
    if (this.root == null) return null;
    return findInSubtree(this.root, value);
  },

  // Add
  add: function(value) {
    var add = function(node, value) {
      var newNode;
      if (node.value == value) {
        return;
      } else if (node.value > value) {
        if (node.leftChild) {
          add(node.leftChild, value);
        } else {
          newNode = new Node(value, null, null, node);
          node.leftChild = newNode;
        }
      } else {
        if (node.rightChild) {
          add(node.rightChild, value);
        } else {
          newNode = new Node(value, null, null, node);
          node.rightChild = newNode;
        }
      }
    };
    if (this.root == null) {
      this.root = new Node(value, null, null, null);
    } else {
      add(this.root, value);
    }
  },

  // Remove
  remove: function(value) {
    const minimunInSubTree = function(node) {
      while (node.leftChild != null) {
        node = node.leftChild;
      }
      return node;
    };

    const deleteNode = function(nodeToDelete, newNode) {
      const parent = nodeToDelete.parent;
      const isLeftOfParent = parent.leftChild == nodeToDelete;
      if (isLeftOfParent) {
        parent.leftChild = newNode;
      } else {
        parent.rightChild = newNode;
      }
      if (newNode) {
        newNode.parent = parent;
      }
    };

    var nodeToDelete = this.find(value);
    if (!nodeToDelete) return;

    if (!nodeToDelete.leftChild) {
      deleteNode(nodeToDelete, nodeToDelete.rightChild);
    } else if (!nodeToDelete.rightChild) {
      deleteNode(nodeToDelete, nodeToDelete.leftChild);
    } else {
      const successor = minimunInSubTree(nodeToDelete.rightChild);
      nodeToDelete.value = successor.value;
      deleteNode(successor, successor.rightChild);
    }
  }
};

var bst = new BST();
bst.add(11);
bst.add(3);
bst.add(22);
bst.add(0);
bst.add(100);
bst.add(5);
bst.add(2);
bst.add(7);
console.log("Inorder =============================");
bst.inOrder();
console.log("3", bst.find(3) != null);
console.log("Adding 2 =============================");
bst.postOrder(node => {
  node.value = node.value + 2;
});
console.log("Inorder =============================");
bst.inOrder();
bst.postOrder(node => {
  node.value = node.value - 2;
});
console.log("postOrder =============================");
bst.postOrder();
console.log("preOrder =============================");
bst.preOrder();
bst.remove(3);
console.log("Inorder =============================");
bst.inOrder();
console.log("postOrder =============================");
bst.postOrder();
